{"version":3,"sources":["Cell.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","state","onClick","bind","this","boardIdx","cellIdx","className","currentBoardIdx","currentCellIdx","firstPlayerInputs","indexOf","secondPlayerInputs","getClassName","value","React","Component","Board","onCellClick","values","CELL_VALUE","deadBoards","updateBoards","isDead","style","backgroundColor","map","v","key","c","Game","isLoading","showResult","isMultiPlayer","currentPlayer","boards","playerInputs","first","second","inp","currBoardInputs","setState","isComputerInput","board","getIsDead","length","setTimeout","computerInput","updatePlayerInput","updateCurrentPlayer","updateCurrentCell","updateValueInBoard","inputIdx","chooseInput","boardId","Math","floor","cellId","idx","getRandom","i","margin","color","max","min","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7f262be.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    const { boardIdx, cellIdx } = this.props;\n    this.props.onClick(boardIdx, cellIdx);\n  }\n\n  getClassName() {\n    let className = 'cell';\n    if (\n      this.props.currentBoardIdx === this.props.boardIdx &&\n      this.props.currentCellIdx === this.props.cellIdx\n    ) {\n      className = className + ' highlighted';\n    }\n\n    if (this.props.firstPlayerInputs.indexOf(this.props.cellIdx) > -1) {\n      className = className + ' first-player-input';\n    }\n\n    if (this.props.secondPlayerInputs.indexOf(this.props.cellIdx) > -1) {\n      className = className + ' second-player-input';\n    }\n\n    return className;\n  }\n\n  render() {\n    return (\n      <div className={this.getClassName()} onClick={this.onClick}>\n        {this.props.value}\n      </div>\n    );\n  }\n}\n\nCell.propTypes = {\n  value: PropTypes.string.isRequired,\n  boardIdx: PropTypes.number.isRequired,\n  cellIdx: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\nimport { CELL_VALUE } from './App';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n  }\n\n  getIsDead(values) {\n    // when first row is filled\n    if (\n      values[0] === values[1] &&\n      values[0] === values[2] &&\n      values[0] === CELL_VALUE\n    ) {\n      return true;\n    }\n    // when second row is filled\n    if (\n      values[3] === values[4] &&\n      values[3] === values[5] &&\n      values[3] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when third row is filled\n    if (\n      values[6] === values[7] &&\n      values[6] === values[8] &&\n      values[6] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when first column is filled\n    if (\n      values[0] === values[3] &&\n      values[0] === values[6] &&\n      values[0] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when second column is filled\n    if (\n      values[1] === values[4] &&\n      values[1] === values[7] &&\n      values[1] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when third column is filled\n    if (\n      values[2] === values[5] &&\n      values[2] === values[8] &&\n      values[2] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when first diagonal cells are filled\n    if (\n      values[0] === values[4] &&\n      values[0] === values[8] &&\n      values[0] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when second diagonal cells are filled\n    if (\n      values[2] === values[4] &&\n      values[2] === values[6] &&\n      values[2] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onCellClick(boardIdx, cellIdx) {\n    if (boardIdx !== this.props.boardIdx) {\n      return;\n    }\n    // ignore click if the board is already dead\n    if (this.props.deadBoards.indexOf(this.props.boardIdx) > -1) {\n      return;\n    }\n\n    // ignore if clicked on non empty cell\n    const values = [...this.props.values];\n    if (values[cellIdx] === CELL_VALUE) {\n      return;\n    }\n    // update the boards\n    this.props.updateBoards(boardIdx, cellIdx);\n  }\n\n  render() {\n    const { firstPlayerInputs, secondPlayerInputs } = this.props;\n    const isDead = this.props.deadBoards.indexOf(this.props.boardIdx) > -1;\n    return (\n      <div\n        className=\"board\"\n        style={isDead ? { backgroundColor: '#000000b0' } : {}}>\n        {[0, 1, 2].map(v => (\n          <div className=\"row\" key={`row-${v}`}>\n            {[0, 1, 2].map(c => (\n              <Cell\n                key={`cell-${c}`}\n                cellIdx={v * 3 + c}\n                value={this.props.values[v * 3 + c]}\n                onClick={this.onCellClick}\n                firstPlayerInputs={firstPlayerInputs}\n                secondPlayerInputs={secondPlayerInputs}\n                {...this.props}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport { CELL_VALUE, getRandom } from './App';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      showResult: false,\n      currentBoardIdx: -1,\n      currentCellIdx: -1,\n      isMultiPlayer: false,\n      currentPlayer: 1,\n      deadBoards: [],\n      boards: [\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '']\n      ],\n      playerInputs: [\n        { first: [], second: [] },\n        { first: [], second: [] },\n        { first: [], second: [] }\n      ]\n    };\n\n    this.updateBoards = this.updateBoards.bind(this);\n  }\n\n  getIsDead(values) {\n    // when first row is filled\n    if (\n      values[0] === values[1] &&\n      values[0] === values[2] &&\n      values[0] === CELL_VALUE\n    ) {\n      return true;\n    }\n    // when second row is filled\n    if (\n      values[3] === values[4] &&\n      values[3] === values[5] &&\n      values[3] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when third row is filled\n    if (\n      values[6] === values[7] &&\n      values[6] === values[8] &&\n      values[6] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when first column is filled\n    if (\n      values[0] === values[3] &&\n      values[0] === values[6] &&\n      values[0] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when second column is filled\n    if (\n      values[1] === values[4] &&\n      values[1] === values[7] &&\n      values[1] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when third column is filled\n    if (\n      values[2] === values[5] &&\n      values[2] === values[8] &&\n      values[2] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when first diagonal cells are filled\n    if (\n      values[0] === values[4] &&\n      values[0] === values[8] &&\n      values[0] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    // when second diagonal cells are filled\n    if (\n      values[2] === values[4] &&\n      values[2] === values[6] &&\n      values[2] === CELL_VALUE\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updatePlayerInput(currentBoardIdx, currentCellIdx) {\n    let { currentPlayer } = this.state;\n    let playerInputs = this.state.playerInputs.map(inp => ({ ...inp }));\n    let currBoardInputs = playerInputs[currentBoardIdx];\n    let first = [...currBoardInputs.first];\n    let second = [...currBoardInputs.second];\n    if (currentPlayer === 1) {\n      first = [...first, currentCellIdx];\n    } else {\n      second = [...second, currentCellIdx];\n    }\n    currBoardInputs = { first, second };\n    playerInputs[currentBoardIdx] = currBoardInputs;\n    this.setState({ playerInputs });\n  }\n\n  updateCurrentPlayer() {\n    let currentPlayer = this.state.currentPlayer === 1 ? 2 : 1;\n    this.setState({ currentPlayer });\n  }\n\n  updateCurrentCell(currentBoardIdx, currentCellIdx) {\n    this.setState({ currentBoardIdx, currentCellIdx });\n  }\n\n  updateValueInBoard(currentBoardIdx, currentCellIdx, isComputerInput) {\n    let boards = this.state.boards.map(board => [...board]);\n    boards[currentBoardIdx][currentCellIdx] = CELL_VALUE;\n    const values = boards[currentBoardIdx];\n    const isDead = this.getIsDead(values);\n    this.setState({ boards });\n    if (isDead) {\n      const deadBoards = [...this.state.deadBoards, currentBoardIdx];\n      const showResult = deadBoards.length === 3;\n      this.setState({ deadBoards, showResult });\n      if (showResult) {\n        return;\n      }\n    }\n\n    if (!this.state.isMultiPlayer && !isComputerInput) {\n      this.setState({ isLoading: true });\n      setTimeout(() => this.computerInput(), 2000);\n    }\n  }\n\n  // update the state of the boards after player input\n  updateBoards(currentBoardIdx, currentCellIdx, isComputerInput = false) {\n    this.updatePlayerInput(currentBoardIdx, currentCellIdx);\n    this.updateCurrentPlayer();\n    this.updateCurrentCell(currentBoardIdx, currentCellIdx);\n    this.updateValueInBoard(currentBoardIdx, currentCellIdx, isComputerInput);\n  }\n\n  computerInput() {\n    const inputIdx = this.chooseInput();\n    const boardId = Math.floor(inputIdx / 9);\n    const cellId = inputIdx % 9;\n    this.updateBoards(boardId, cellId, true);\n    this.setState({ isLoading: false });\n  }\n\n  chooseInput() {\n    let boards = this.state.boards.map(board => [...board]);\n    let idx = getRandom(27, 0);\n    for (let i = 0; i < 27; i++) {\n      idx = (idx + 1) % 27;\n      let boardId = Math.floor(idx / 9);\n      let cellId = idx % 9;\n      let values = [...boards[boardId]];\n      if (values[cellId] === CELL_VALUE) {\n        continue;\n      }\n      values[cellId] = CELL_VALUE;\n      let isDead = this.getIsDead(values);\n      if (!isDead) {\n        return idx;\n      }\n    }\n\n    // when all possible places are occupied\n    // put the value where ever possible\n    for (let i = 0; i < 27; i++) {\n      idx = (idx + 1) % 27;\n      let boardId = Math.floor(idx / 9);\n      let cellId = idx % 9;\n      let values = [boards[boardId]];\n      if (values[cellId] === CELL_VALUE) {\n        continue;\n      }\n      return idx;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.isLoading && <div className=\"loading\"></div>}\n\n        {!this.state.showResult && (\n          <div className=\"App\">\n            <h2 style={{ margin: 0 }}>\n              Turn: Player {this.state.currentPlayer}\n            </h2>\n          </div>\n        )}\n\n        {this.state.showResult && (\n          <div className=\"App\">\n            <h2 style={{ margin: 0, color: 'green' }}>\n              Player {this.state.currentPlayer} wins!\n            </h2>\n          </div>\n        )}\n\n        <div className=\"game\">\n          {this.state.boards.map((board, idx) => (\n            <Board\n              key={idx}\n              boardIdx={idx}\n              currentBoardIdx={this.state.currentBoardIdx}\n              currentCellIdx={this.state.currentCellIdx}\n              updateBoards={this.updateBoards}\n              isMultiPlayer={this.state.isMultiPlayer}\n              currentPlayer={this.state.currentPlayer}\n              deadBoards={this.state.deadBoards}\n              firstPlayerInputs={this.state.playerInputs[idx].first}\n              secondPlayerInputs={this.state.playerInputs[idx].second}\n              values={board}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from './Game';\n\nexport const CELL_VALUE = 'X';\n\nexport const getRandom = (max, min) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nclass App extends React.Component {\n  render() {\n    return <Game />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}